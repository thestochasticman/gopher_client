"\r\n\r\n\r\n\r\n\r\n\r\nNetwork Working Group                                     F. Anklesaria\r\nRequest for Comments: 1436                                  M. McCahill\r\n                                                             P. Lindner\r\n                                                             D. Johnson\r\n                                                              D. Torrey\r\n                                                             B. Alberti\r\n                                                University of Minnesota\r\n                                                             March 1993\r\n\r\n\r\n                      The Internet Gopher Protocol\r\n         (a distributed document search and retrieval protocol)\r\n\r\nStatus of this Memo\r\n\r\n   This memo provides information for the Internet community.  It does\r\n   not specify an Internet standard.  Distribution of this memo is\r\n   unlimited.\r\n\r\nAbstract\r\n\r\n   The Internet Gopher protocol is designed for distributed document\r\n   search and retrieval.  This document describes the protocol, lists\r\n   some of the implementations currently available, and has an overview\r\n   of how to implement new client and server applications.  This\r\n   document is adapted from the basic Internet Gopher protocol document\r\n   first issued by the Microcomputer Center at the University of\r\n   Minnesota in 1991.\r\n\r\nIntroduction\r\n\r\n   gopher  n.  1. Any of various short tailed, burrowing mammals of the\r\n   family Geomyidae, of North America.  2. (Amer. colloq.) Native or\r\n   inhabitant of Minnesota: the Gopher State.  3. (Amer. colloq.) One\r\n   who runs errands, does odd-jobs, fetches or delivers documents for\r\n   office staff.  4. (computer tech.) software following a simple\r\n   protocol for burrowing through a TCP/IP internet.\r\n\r\n   The Internet Gopher protocol and software follow a client-server\r\n   model.  This protocol assumes a reliable data stream; TCP is assumed.\r\n   Gopher servers should listen on port 70 (port 70 is assigned to\r\n   Internet Gopher by IANA).  Documents reside on many autonomous\r\n   servers on the Internet.  Users run client software on their desktop\r\n   systems, connecting to a server and sending the server a selector (a\r\n   line of text, which may be empty) via a TCP connection at a well-\r\n   known port.  The server responds with a block of text terminated by a\r\n   period on a line by itself and closes the connection.  No state is\r\n   retained by the server.\r\n\r\n\r\n\r\nAnklesari, McCahill, Lindner, Johnson, Torrey & Alberti         [Page 1]\r\n\f\r\nRFC 1436                         Gopher                       March 1993\r\n\r\n\r\n   While documents (and services) reside on many servers, Gopher client\r\n   software presents users with a hierarchy of items and directories\r\n   much like a file system.  The Gopher interface is designed to\r\n   resemble a file system since a file system is a good model for\r\n   organizing documents and services; the user sees what amounts to one\r\n   big networked information system containing primarily document items,\r\n   directory items, and search items (the latter allowing searches for\r\n   documents across subsets of the information base).\r\n\r\n   Servers return either directory lists or documents.  Each item in a\r\n   directory is identified by a type (the kind of object the item is),\r\n   user-visible name (used to browse and select from listings), an\r\n   opaque selector string (typically containing a pathname used by the\r\n   destination host to locate the desired object), a host name (which\r\n   host to contact to obtain this item), and an IP port number (the port\r\n   at which the server process listens for connections). The user only\r\n   sees the user-visible name.  The client software can locate and\r\n   retrieve any item by the trio of selector, hostname, and port.\r\n\r\n   To use a search item, the client submits a query to a special kind of\r\n   Gopher server: a search server.  In this case, the client sends the\r\n   selector string (if any) and the list of words to be matched. The\r\n   response yields \"virtual directory listings\" that contain items\r\n   matching the search criteria.\r\n\r\n   Gopher servers and clients exist for all popular platforms.  Because\r\n   the protocol is so sparse and simple, writing servers or clients is\r\n   quick and straightforward.\r\n\r\n1.  Introduction\r\n\r\n   The Internet Gopher protocol is designed primarily to act as a\r\n   distributed document delivery system.  While documents (and services)\r\n   reside on many servers, Gopher client software presents users with a\r\n   hierarchy of items and directories much like a file system.  In fact,\r\n   the Gopher interface is designed to resemble a file system since a\r\n   file system is a good model for locating documents and services.  Why\r\n   model a campus-wide information system after a file system?  Several\r\n   reasons:\r\n\r\n      (a) A hierarchical arrangement of information is familiar to many\r\n      users.  Hierarchical directories containing items (such as\r\n      documents, servers, and subdirectories) are widely used in\r\n      electronic bulletin boards and other campus-wide information\r\n      systems. People who access a campus-wide information server will\r\n      expect some sort of hierarchical organization to the information\r\n      presented.\r\n\r\n\r\n\r\n\r\nAnklesari, McCahill, Lindner, Johnson, Torrey & Alberti         [Page 2]\r\n\f\r\nRFC 1436                         Gopher                       March 1993\r\n\r\n\r\n      (b) A file-system style hierarchy can be expressed in a simple\r\n      syntax.  The syntax used for the internet Gopher protocol is\r\n      easily understandable, and was designed to make debugging servers\r\n      and clients easy.  You can use Telnet to simulate an internet\r\n      Gopher client's requests and observe the responses from a server.\r\n      Special purpose software tools are not required.  By keeping the\r\n      syntax of the pseudo-file system client/server protocol simple, we\r\n      can also achieve better performance for a very common user\r\n      activity: browsing through the directory hierarchy.\r\n\r\n      (c) Since Gopher originated in a University setting, one of the\r\n      goals was for departments to have the option of publishing\r\n      information from their inexpensive desktop machines, and since\r\n      much of the information can be presented as simple text files\r\n      arranged in directories, a protocol modeled after a file system\r\n      has immediate utility.  Because there can be a direct mapping from\r\n      the file system on the user's desktop machine to the directory\r\n      structure published via the Gopher protocol, the problem of\r\n      writing server software for slow desktop systems is minimized.\r\n\r\n      (d) A file system metaphor is extensible.  By giving a \"type\"\r\n      attribute to items in the pseudo-file system, it is possible to\r\n      accommodate documents other than simple text documents.  Complex\r\n      database services can be handled as a separate type of item.  A\r\n      file-system metaphor does not rule out search or database-style\r\n      queries for access to documents.  A search-server type is also\r\n      defined in this pseudo-file system.  Such servers return \"virtual\r\n      directories\" or list of documents matching user specified\r\n      criteria.\r\n\r\n2.  The internet Gopher Model\r\n\r\n   A detailed BNF rendering of the internet Gopher syntax is available\r\n   in the appendix...but a close reading of the appendix may not be\r\n   necessary to understand the internet Gopher protocol.\r\n\r\n   In essence, the Gopher protocol consists of a client connecting to a\r\n   server and sending the server a selector (a line of text, which may\r\n   be empty) via a TCP connection.  The server responds with a block of\r\n   text terminated with a period on a line by itself, and closes the\r\n   connection.  No state is retained by the server between transactions\r\n   with a client. The simple nature of the protocol stems from the need\r\n   to implement servers and clients for the slow, smaller desktop\r\n   computers (1 MB Macs and DOS machines), quickly, and efficiently.\r\n\r\n   Below is a simple example of a client/server interaction; more\r\n   complex interactions are dealt with later.  Assume that a \"well-\r\n   known\" Gopher server (this may be duplicated, details are discussed\r\n\r\n\r\n\r\nAnklesari, McCahill, Lindner, Johnson, Torrey & Alberti         [Page 3]\r\n\f\r\nRFC 1436                         Gopher                       March 1993\r\n\r\n\r\n   later) listens at a well known port for the campus (much like a\r\n   domain-name server).  The only configuration information the client\r\n   software retains is this server's name and port number (in this\r\n   example that machine is rawBits.micro.umn.edu and the port 70). In\r\n   the example below the F character denotes the TAB character.\r\n\r\n Client:          {Opens connection to rawBits.micro.umn.edu at port 70}\r\n\r\n Server:          {Accepts connection but says nothing}\r\n\r\n Client: <CR><LF> {Sends an empty line: Meaning \"list what you have\"}\r\n\r\n Server:          {Sends a series of lines, each ending with CR LF}\r\n 0About internet GopherFStuff:About usFrawBits.micro.umn.eduF70\r\n 1Around University of MinnesotaFZ,5692,AUMFunderdog.micro.umn.eduF70\r\n 1Microcomputer News & PricesFPrices/Fpserver.bookstore.umn.eduF70\r\n 1Courses, Schedules, CalendarsFFevents.ais.umn.eduF9120\r\n 1Student-Staff DirectoriesFFuinfo.ais.umn.eduF70\r\n 1Departmental PublicationsFStuff:DP:FrawBits.micro.umn.eduF70\r\n                    {.....etc.....}\r\n .                  {Period on a line by itself}\r\n                    {Server closes connection}\r\n\r\n\r\n   The first character on each line tells whether the line describes a\r\n   document, directory, or search service (characters '0', '1', '7';\r\n   there are a handful more of these characters described later).  The\r\n   succeeding characters up to the tab form a user display string to be\r\n   shown to the user for use in selecting this document (or directory)\r\n   for retrieval.  The first character of the line is really defining\r\n   the type of item described on this line. In nearly every case, the\r\n   Gopher client software will give the users some sort of idea about\r\n   what type of item this is (by displaying an icon, a short text tag,\r\n   or the like).\r\n\r\n   The characters following the tab, up to the next tab form a selector\r\n   string that the client software must send to the server to retrieve\r\n   the document (or directory listing).  The selector string should mean\r\n   nothing to the client software; it should never be modified by the\r\n   client.  In practice, the selector string is often a pathname or\r\n   other file selector used by the server to locate the item desired.\r\n   The next two tab delimited fields denote the domain-name of the host\r\n   that has this document (or directory), and the port at which to\r\n   connect.  If there are yet other tab delimited fields, the basic\r\n   Gopher client should ignore them.  A CR LF denotes the end of the\r\n   item.\r\n\r\n\r\n\r\n\r\n\r\nAnklesari, McCahill, Lindner, Johnson, Torrey & Alberti         [Page 4]\r\n\f\r\nRFC 1436                         Gopher                       March 1993\r\n\r\n\r\n   In the example, line 1 describes a document the user will see as\r\n   \"About internet Gopher\".  To retrieve this document, the client\r\n   software must send the retrieval string: \"Stuff:About us\" to\r\n   rawBits.micro.umn.edu at port 70.  If the client does this, the\r\n   server will respond with the contents of the document, terminated by\r\n   a period on a line by itself.  A client might present the user with a\r\n   view of the world something like the following list of items:\r\n\r\n\r\n      About Internet Gopher\r\n      Around the University of Minnesota...\r\n      Microcomputer News & Prices...\r\n      Courses, Schedules, Calendars...\r\n      Student-Staff Directories...\r\n      Departmental Publications...\r\n\r\n\r\n\r\n   In this case, directories are displayed with an ellipsis and files\r\n   are displayed without any.  However, depending on the platform the\r\n   client is written for and the author's taste, item types could be\r\n   denoted by other text tags or by icons.  For example, the UNIX\r\n   curses-based client displays directories with a slash (/) following\r\n   the name; Macintosh clients display directories alongside an icon of\r\n   a folder.\r\n\r\n   The user does not know or care that the items up for selection may\r\n   reside on many different machines anywhere on the Internet.\r\n\r\n   Suppose the user selects the line \"Microcomputer News & Prices...\".\r\n   This appears to be a directory, and so the user expects to see\r\n   contents of the directory upon request that it be fetched.  The\r\n   following lines illustrate the ensuing client-server interaction:\r\n\r\n\r\n    Client:           (Connects to pserver.bookstore.umn.edu at port 70)\r\n    Server:           (Accepts connection but says nothing)\r\n    Client: Prices/   (Sends the magic string terminated by CRLF)\r\n    Server:           (Sends a series of lines, each ending with CR LF)\r\n    0About PricesFPrices/AboutusFpserver.bookstore.umn.eduF70\r\n    0Macintosh PricesFPrices/MacFpserver.bookstore.umn.eduF70\r\n    0IBM PricesFPrices/IckFpserver.bookstore.umn.eduF70\r\n    0Printer & Peripheral PricesFPrices/PPPFpserver.bookstore.umn.eduF70\r\n                      (.....etc.....)\r\n    .                 (Period on a line by itself)\r\n                      (Server closes connection)\r\n\r\n\r\n\r\n\r\n\r\nAnklesari, McCahill, Lindner, Johnson, Torrey & Alberti         [Page 5]\r\n\f\r\nRFC 1436                         Gopher                       March 1993\r\n\r\n\r\n3. More details\r\n\r\n3.1  Locating services\r\n\r\n   Documents (or other services that may be viewed ultimately as\r\n   documents, such as a student-staff phonebook) are linked to the\r\n   machine they are on by the trio of selector string, machine domain-\r\n   name, and IP port.  It is assumed that there will be one well-known\r\n   top-level or root server for an institution or campus.  The\r\n   information on this server may be duplicated by one or more other\r\n   servers to avoid a single point of failure and to spread the load\r\n   over several servers.  Departments that wish to put up their own\r\n   departmental servers need to register the machine name and port with\r\n   the administrators of the top-level Gopher server, much the same way\r\n   as they register a machine name with the campus domain-name server.\r\n   An entry which points to the departmental server will then be made at\r\n   the top level server.  This ensures that users will be able to\r\n   navigate their way down what amounts to a virtual hierarchical file\r\n   system with a well known root to any campus server if they desire.\r\n\r\n   Note that there is no requirement that a department register\r\n   secondary servers with the central top-level server; they may just\r\n   place a link to the secondary servers in their own primary servers.\r\n   They may indeed place links to any servers they desire in their own\r\n   server, thus creating a customized view of thethe Gopher information\r\n   universe; links can of course point back at the top-level server.\r\n   The virtual (networked) file system is therefore an arbitrary graph\r\n   structure and not necessarily a rooted tree.  The top-level node is\r\n   merely one convenient, well-known point of entry.  A set of Gopher\r\n   servers linked in this manner may function as a campus-wide\r\n   information system.\r\n\r\n   Servers may of course point links at other than secondary servers.\r\n   Indeed servers may point at other servers offering useful services\r\n   anywhere on the internet.  Viewed in this manner, Gopher can be seen\r\n   as an Internet-wide information system.\r\n\r\n3.2 Server portability and naming\r\n\r\n   It is recommended that all registered servers have alias names\r\n   (domain name system CNAME) that are used by Gopher clients to locate\r\n   them.  Links to these servers should use these alias names rather\r\n   than the primary names.  If information needs to be moved from one\r\n   machine to another, a simple change of domain name system alias\r\n   (CNAME) allows this to occur without any reconfiguration of clients\r\n   in the field.  In short, the domain name system may be used to re-map\r\n   a server to a new address.  There is nothing to prevent secondary\r\n   servers or services from running on otherwise named servers or ports\r\n\r\n\r\n\r\nAnklesari, McCahill, Lindner, Johnson, Torrey & Alberti         [Page 6]\r\n\f\r\nRFC 1436                         Gopher                       March 1993\r\n\r\n\r\n   other than 70, however these should be reachable via a primary\r\n   server.\r\n\r\n3.3 Contacting server administrators\r\n\r\n   It is recommended that every server administrator have a document\r\n   called something like: \"About Bogus University's Gopher server\" as\r\n   the first item in their server's top level directory.  In this\r\n   document should be a short description of what the server holds, as\r\n   well as name, address, phone, and an e-mail address of the person who\r\n   administers the server.  This provides a way for users to get word to\r\n   the administrator of a server that has inaccurate information or is\r\n   not running correctly.  It is also recommended that administrators\r\n   place the date of last update in files for which such information\r\n   matters to the users.\r\n\r\n3.4  Modular addition of services\r\n\r\n   The first character of each line in a server-supplied directory\r\n   listing indicates whether the item is a file (character '0'), a\r\n   directory (character '1'), or a search (character '7').  This is the\r\n   base set of item types in the Gopher protocol.  It is desirable for\r\n   clients to be able to use different services and speak different\r\n   protocols (simple ones such as finger; others such as CSO phonebook\r\n   service, or Telnet, or X.500 directory service) as needs dictate.\r\n   CSO phonebook service is a client/server phonebook system typically\r\n   used at Universities to publish names, e-mail addresses, and so on.\r\n   The CSO phonebook software was developed at the University of\r\n   Illinois and is also sometimes refered to as ph or qi.  For example,\r\n   if a server-supplied directory listing marks a certain item with type\r\n   character '2', then it means that to use this item, the client must\r\n   speak the CSO protocol.  This removes the need to be able to\r\n   anticipate all future needs and hard-wire them in the basic Internet\r\n   Gopher protocol; it keeps the basic protocol extremely simple.  In\r\n   spite of this simplicity, the scheme has the capability to expand and\r\n   change with the times by adding an agreed upon type-character for a\r\n   new service.  This also allows the client implementations to evolve\r\n   in a modular fashion, simply by dropping in a module (or launching a\r\n   new process) for some new service.  The servers for the new service\r\n   of course have to know nothing about Internet Gopher; they can just\r\n   be off-the shelf CSO, X.500, or other servers.  We do not however,\r\n   encourage arbitrary or machine-specific proliferation of service\r\n   types in the basic Gopher protocol.\r\n\r\n   On the other hand, subsets of other document retrieval schemes may be\r\n   mapped onto the Gopher protocol by means of \"gateway-servers\".\r\n   Examples of such servers include Gopher-to-FTP gateways, Gopher-to-\r\n   archie gateways, Gopher-to-WAIS gateways, etc.  There are a number of\r\n\r\n\r\n\r\nAnklesari, McCahill, Lindner, Johnson, Torrey & Alberti         [Page 7]\r\n\f\r\nRFC 1436                         Gopher                       March 1993\r\n\r\n\r\n   advantages of such mechanisms. First, a relatively powerful server\r\n   machine inherits both the intelligence and work, rather than the more\r\n   modest, inexpensive desktop system that typically runs client\r\n   software or basic server software.  Equally important, clients do not\r\n   have to be modified to take advantage of a new resource.\r\n\r\n3.5  Building clients\r\n\r\n   A client simply sends the retrieval string to a server if it wants to\r\n   retrieve a document or view the contents of a directory.  Of course,\r\n   each host may have pointers to other hosts, resulting in a \"graph\"\r\n   (not necessarily a rooted tree) of hosts.  The client software may\r\n   save (or rather \"stack\") the locations that it has visited in search\r\n   of a document.  The user could therefore back out of the current\r\n   location by unwinding the stack.  Alternatively, a client with\r\n   multiple-window capability might just be able to display more than\r\n   one directory or document at the same time.\r\n\r\n   A smart client could cache the contents of visited directories\r\n   (rather than just the directory's item descriptor), thus avoiding\r\n   network transactions if the information has been previously\r\n   retrieved.\r\n\r\n   If a client does not understand what a say, type 'B' item (not a core\r\n   item) is, then it may simply ignore the item in the directory\r\n   listing; the user never even has to see it.  Alternatively, the item\r\n   could be displayed as an unknown type.\r\n\r\n   Top-level or primary servers for a campus are likely to get more\r\n   traffic than secondary servers, and it would be less tolerable for\r\n   such primary servers to be down for any long time.  So it makes sense\r\n   to \"clone\" such important servers and construct clients that can\r\n   randomly choose between two such equivalent primary servers when they\r\n   first connect (to balance server load), moving to one if the other\r\n   seems to be down.  In fact, smart client implementations do this\r\n   clone server and load balancing.  Alternatively, it may make sense to\r\n   have the domain name system return one of a set of redundant of\r\n   server's IP address to load balance betwen redundant sets of\r\n   important servers.\r\n\r\n3.6  Building ordinary internet Gopher servers\r\n\r\n   The retrieval string sent to the server might be a path to a file or\r\n   directory.  It might be the name of a script, an application or even\r\n   a query that generates the document or directory returned.  The basic\r\n   server uses the string it gets up to but not including a CR-LF or a\r\n   TAB, whichever comes first.\r\n\r\n\r\n\r\n\r\nAnklesari, McCahill, Lindner, Johnson, Torrey & Alberti         [Page 8]\r\n\f\r\nRFC 1436                         Gopher                       March 1993\r\n\r\n\r\n   All intelligence is carried by the server implementation rather than\r\n   the protocol.  What you build into more exotic servers is up to you.\r\n   Server implementations may grow as needs dictate and time allows.\r\n\r\n3.7  Special purpose servers\r\n\r\n   There are two special server types (beyond the normal Gopher server)\r\n   also discussed below:\r\n\r\n      1.  A server directory listing can point at a CSO nameserver (the\r\n      server returns a type character of '2') to allow a campus\r\n      student-staff phonebook lookup service.  This may show up on the\r\n      user's list of choices, perhaps preceded by the icon of a phone-\r\n      book.  If this item is selected, the client software must resort\r\n      to a pure CSO nameserver protocol when it connects to the\r\n      appropriate host.\r\n\r\n      2.  A server can also point at a \"search server\" (returns a first\r\n      character of '7').  Such servers may implement campus network (or\r\n      subnet) wide searching capability.  The most common search servers\r\n      maintain full-text indexes on the contents of text documents held\r\n      by some subset of Gopher servers.  Such a \"full-text search\r\n      server\" responds to client requests with a list of all documents\r\n      that contain one or more words (the search criteria).  The client\r\n      sends the server the selector string, a tab, and the search string\r\n      (words to search for). If the selector string is empty, the client\r\n      merely sends the search string.  The server returns the equivalent\r\n      of a directory listing for documents matching the search criteria.\r\n      Spaces between words are usually implied Boolean ANDs (although in\r\n      different implementations or search types, this may not\r\n      necessarily be true).\r\n\r\n   The CSO addition exists for historical reasons: at time of design,\r\n   the campus phone-book servers at the University of Minnesota used the\r\n   CSO protocol and it seemed simplest to just engulf them.  The index-\r\n   server is however very much a Gopher in spirit, albeit with a slight\r\n   twist in the meaning of the selector-string.  Index servers are a\r\n   natural place to incorperate gateways to WAIS and WHOIS services.\r\n\r\n3.7.1  Building CSO-servers\r\n\r\n   A CSO Nameserver implementation for UNIX and associated documentation\r\n   is available by anonymous ftp from uxa.cso.uiuc.edu.  We do not\r\n   anticipate implementing it on other machines.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nAnklesari, McCahill, Lindner, Johnson, Torrey & Alberti         [Page 9]\r\n\f\r\nRFC 1436                         Gopher                       March 1993\r\n\r\n\r\n3.7.2  Building full-text search servers\r\n\r\n   A full-text search server is a special-purpose server that knows\r\n   about the Gopher scheme for retrieving documents.  These servers\r\n   maintain a full-text index of the contents of plain text documents on\r\n   Gopher servers in some specified domain.  A Gopher full-text search\r\n   server was implemented using several NeXTstations because it was easy\r\n   to take advantage of the full-text index/search engine built into the\r\n   NeXT system software.  A search server for generic UNIX systems based\r\n   on the public domain WAIS search engine, is also available and\r\n   currently an optional part of the UNIX gopher server.  In addition,\r\n   at least one implementation of the gopher server incorperates a\r\n   gateway to WAIS servers by presenting the WAIS servers to gopherspace\r\n   as full-text search servers.  The gopher<->WAIS gateway servers does\r\n   the work of translating from gopher protocol to WAIS so unmodified\r\n   gopher clients can access WAIS servers via the gateway server.\r\n\r\n   By using several index servers (rather than a monolithic index\r\n   server) indexes may be searched in parallel (although the client\r\n   software is not aware of this).  While maintaining full-text indexes\r\n   of documents distributed over many machines may seem a daunting task,\r\n   the task can be broken into smaller pieces (update only a portion of\r\n   the indexes, search several partial indexes in parallel) so that it\r\n   is manageable.  By spreading this task over several small, cheap (and\r\n   fast) workstations it is possible to take advantage of fine-grain\r\n   parallelism.  Again, the client software is not aware of this. Client\r\n   software only needs to know that it can send a search string to an\r\n   index server and will receive a list of documents that contain the\r\n   words in the search string.\r\n\r\n3.8  Item type characters\r\n\r\n   The client software decides what items are available by looking at\r\n   the first character of each line in a directory listing.  Augmenting\r\n   this list can extend the protocol.  A list of defined item-type\r\n   characters follows:\r\n\r\n   0   Item is a file\r\n   1   Item is a directory\r\n   2   Item is a CSO phone-book server\r\n   3   Error\r\n   4   Item is a BinHexed Macintosh file.\r\n   5   Item is DOS binary archive of some sort.\r\n       Client must read until the TCP connection closes.  Beware.\r\n   6   Item is a UNIX uuencoded file.\r\n   7   Item is an Index-Search server.\r\n   8   Item points to a text-based telnet session.\r\n   9   Item is a binary file!\r\n\r\n\r\n\r\nAnklesari, McCahill, Lindner, Johnson, Torrey & Alberti        [Page 10]\r\n\f\r\nRFC 1436                         Gopher                       March 1993\r\n\r\n\r\n       Client must read until the TCP connection closes.  Beware.\r\n   +   Item is a redundant server\r\n   T   Item points to a text-based tn3270 session.\r\n   g   Item is a GIF format graphics file.\r\n   I   Item is some kind of image file.  Client decides how to display.\r\n\r\n   Characters '0' through 'Z' are reserved.  Local experiments should\r\n   use other characters.  Machine-specific extensions are not\r\n   encouraged.  Note that for type 5 or type 9 the client must be\r\n   prepared to read until the connection closes.  There will be no\r\n   period at the end of the file; the contents of these files are binary\r\n   and the client must decide what to do with them based perhaps on the\r\n   .xxx extension.\r\n\r\n3.9  User display strings and server selector strings\r\n\r\n   User display strings are intended to be displayed on a line on a\r\n   typical screen for a user's viewing pleasure.  While many screens can\r\n   accommodate 80 character lines, some space is needed to display a tag\r\n   of some sort to tell the user what sort of item this is.  Because of\r\n   this, the user display string should be kept under 70 characters in\r\n   length.  Clients may truncate to a length convenient to them.\r\n\r\n4.   Simplicity is intentional\r\n\r\n   As far as possible we desire any new features to be carried as new\r\n   protocols that will be hidden behind new document-types.  The\r\n   internet Gopher philosophy is:\r\n\r\n      (a) Intelligence is held by the server.  Clients have the option\r\n      of being able to access new document types (different, other types\r\n      of servers) by simply recognizing the document-type character.\r\n      Further intelligence to be borne by the protocol should be\r\n      minimized.\r\n\r\n      (b) The well-tempered server ought to send \"text\" (unless a file\r\n      must be transferred as raw binary).  Should this text include\r\n      tabs, formfeeds, frufru?  Probably not, but rude servers will\r\n      probably send them anyway.  Publishers of documents should be\r\n      given simple tools (filters) that will alert them if there are any\r\n      funny characters in the documents they wish to publish, and give\r\n      them the opportunity to strip the questionable characters out; the\r\n      publisher may well refuse.\r\n\r\n      (c) The well-tempered client should do something reasonable with\r\n      funny characters received in text; filter them out, leave them in,\r\n      whatever.\r\n\r\n\r\n\r\n\r\nAnklesari, McCahill, Lindner, Johnson, Torrey & Alberti        [Page 11]\r\n\f\r\nRFC 1436                         Gopher                       March 1993\r\n\r\n\r\nAppendix\r\n\r\n   Paul's NQBNF (Not Quite BNF) for the Gopher Protocol.\r\n\r\n   Note:  This is modified BNF (as used by the Pascal people) with a few\r\n          English modifiers thrown in.  Stuff enclosed in '{}' can be\r\n          repeated zero or more times.  Stuff in '[]' denotes a set of\r\n          items.  The '-' operator denotes set subtraction.\r\n\r\n\r\nDirectory Entity\r\n\r\nCR-LF     ::= ASCII Carriage Return Character followed by Line Feed\r\n              character.\r\n\r\nTab       ::= ASCII Tab character.\r\n\r\nNUL       ::= ASCII NUL character.\r\n\r\nUNASCII   ::= ASCII - [Tab CR-LF NUL].\r\n\r\nLastline  ::= '.'CR-LF.\r\n\r\nTextBlock ::= Block of ASCII text not containing Lastline pattern.\r\n\r\nType      ::= UNASCII.\r\n\r\nRedType   ::= '+'.\r\n\r\nUser_Name ::= {UNASCII}.\r\n\r\nSelector  ::= {UNASCII}.\r\n\r\nHost      ::= {{UNASCII - ['.']} '.'} {UNASCII - ['.']}.\r\n\r\nNote: This is a Fully Qualified Domain Name as defined in RFC 1034.\r\n      (e.g., gopher.micro.umn.edu)  Hosts that have a CR-LF\r\n      TAB or NUL in their name get what they deserve.\r\n\r\nDigit     ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' .\r\n\r\nDigitSeq  ::= digit {digit}.\r\n\r\nPort      ::= DigitSeq.\r\n\r\nNote: Port corresponds the the TCP Port Number, its value should\r\n      be in the range [0..65535]; port 70 is officially assigned\r\n      to gopher.\r\n\r\n\r\n\r\nAnklesari, McCahill, Lindner, Johnson, Torrey & Alberti        [Page 12]\r\n\f\r\nRFC 1436                         Gopher                       March 1993\r\n\r\n\r\nDirEntity ::= Type User_Name Tab Selector Tab Host Tab Port CR-LF\r\n          {RedType User_Name Tab Selector Tab Host Tab Port CR-LF}\r\n\r\n\r\n\r\nNotes:\r\n\r\n   It is *highly* recommended that the User_Name field contain only\r\n   printable characters, since many different clients will be using\r\n   it.  However if eight bit characters are used, the characters\r\n   should conform with the ISO Latin1 Character Set.  The length of\r\n   the User displayable line should be less than 70 Characters; longer\r\n   lines may not fit across some screens.\r\n\r\n   The Selector string should be no longer than 255 characters.\r\n\r\n\r\nMenu Entity\r\n\r\nMenu      ::= {DirEntity} Lastline.\r\n\r\n\r\nMenu Transaction  (Type 1 item)\r\n\r\nC: Opens Connection\r\nS: Accepts Connection\r\nC: Sends Selector String\r\nS: Sends Menu Entity\r\n\r\n   Connection is closed by either client or server (typically server).\r\n\r\n\r\nTextfile Entity\r\n\r\nTextFile  ::= {TextBlock} Lastline\r\n\r\nNote:  Lines beginning with periods must be prepended with an extra\r\n     period to ensure that the transmission is not terminated early.\r\n     The client should strip extra periods at the beginning of the line.\r\n\r\n\r\nTextFile Transaction (Type 0 item)\r\n\r\nC: Opens Connection.\r\nS: Accepts connection\r\nC: Sends Selector String.\r\nS: Sends TextFile Entity.\r\n\r\n\r\n\r\n\r\nAnklesari, McCahill, Lindner, Johnson, Torrey & Alberti        [Page 13]\r\n\f\r\nRFC 1436                         Gopher                       March 1993\r\n\r\n\r\n   Connection is closed by either client or server (typically server).\r\n\r\nNote:  The client should be prepared for the server closing the\r\n       connection without sending the Lastline.  This allows the\r\n       client to use fingerd servers.\r\n\r\n\r\nFull-Text Search Transaction (Type 7 item)\r\n\r\nWord      ::= {UNASCII - ' '}\r\nBoolOp ::= 'and' | 'or' | 'not' | SPACE\r\nSearchStr ::= Word {{SPACE BoolOp} SPACE Word}\r\n\r\nC: Opens Connection.\r\nC: Sends Selector String, Tab, Search String.\r\nS: Sends Menu Entity.\r\n\r\nNote:  In absence of 'and', 'or', or 'not' operators, a SPACE is\r\n       regarded as an implied 'and' operator.  Expression is evaluated\r\n       left to right.  Further, not all search engines or search\r\n       gateways currently implemented have the boolean operators\r\n       implemented.\r\n\r\nBinary file Transaction (Type 9 or 5 item)\r\n\r\nC: Opens Connection.\r\nS: Accepts connection\r\nC: Sends Selector String.\r\nS: Sends a binary file and closes connection when done.\r\n\r\n\r\nSyntactic Meaning for Directory Entities\r\n\r\n\r\nThe client should interpret the type field as follows:\r\n\r\n0   The item is a TextFile Entity.\r\n    Client should use a TextFile Transaction.\r\n\r\n1   The item is a Menu Entity.\r\n    Client should use a Menu Transaction.\r\n\r\n2   The information applies to a CSO phone book entity.\r\n    Client should talk CSO protocol.\r\n\r\n3   Signals an error condition.\r\n\r\n4   Item is a Macintosh file encoded in BINHEX format\r\n\r\n\r\n\r\nAnklesari, McCahill, Lindner, Johnson, Torrey & Alberti        [Page 14]\r\n\f\r\nRFC 1436                         Gopher                       March 1993\r\n\r\n\r\n5   Item is PC-DOS binary file of some sort.  Client gets to decide.\r\n\r\n6   Item is a uuencoded file.\r\n\r\n7   The information applies to a Index Server.\r\n    Client should use a FullText Search transaction.\r\n\r\n8   The information applies to a Telnet session.\r\n    Connect to given host at given port. The name to login as at this\r\n    host is in the selector string.\r\n\r\n9   Item is a binary file.  Client must decide what to do with it.\r\n\r\n+   The information applies to a duplicated server.  The information\r\n    contained within is a duplicate of the primary server.  The primary\r\n    server is defined as the last DirEntity that is has a non-plus\r\n    \"Type\" field.  The client should use the transaction as defined by\r\n    the primary server Type field.\r\n\r\ng   Item is a GIF graphic file.\r\n\r\nI   Item is some kind of image file.  Client gets to decide.\r\n\r\nT   The information applies to a tn3270 based telnet session.\r\n    Connect to given host at given port. The name to login as at this\r\n    host is in the selector string.\r\n\r\nSecurity Considerations\r\n\r\n   Security issues are not discussed in this memo.\r\n\r\nAuthors' Addresses\r\n\r\n   Farhad Anklesaria\r\n   Computer and Information Services, University of Minnesota\r\n   Room 152 Shepherd Labs\r\n   100 Union Street SE\r\n   Minneapolis, MN 55455\r\n\r\n   Phone: (612) 625 1300\r\n   EMail: fxa@boombox.micro.umn.edu\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nAnklesari, McCahill, Lindner, Johnson, Torrey & Alberti        [Page 15]\r\n\f\r\nRFC 1436                         Gopher                       March 1993\r\n\r\n\r\n   Mark McCahill\r\n   Computer and Information Services, University of Minnesota\r\n   Room 152 Shepherd Labs\r\n   100 Union Street SE\r\n   Minneapolis, MN 55455\r\n\r\n   Phone: (612) 625 1300\r\n   EMail: mpm@boombox.micro.umn.edu\r\n\r\n\r\n   Paul Lindner\r\n   Computer and Information Services, University of Minnesota\r\n   Room 152 Shepherd Labs\r\n   100 Union Street SE\r\n   Minneapolis, MN 55455\r\n\r\n   Phone: (612) 625 1300\r\n   EMail: lindner@boombox.micro.umn.edu\r\n\r\n\r\n   David Johnson\r\n   Computer and Information Services, University of Minnesota\r\n   Room 152 Shepherd Labs\r\n   100 Union Street SE\r\n   Minneapolis, MN 55455\r\n\r\n   Phone: (612) 625 1300\r\n   EMail: dmj@boombox.micro.umn.edu\r\n\r\n\r\n   Daniel Torrey\r\n   Computer and Information Services, University of Minnesota\r\n   Room 152 Shepherd Labs\r\n   100 Union Street SE\r\n   Minneapolis, MN 55455\r\n\r\n   Phone: (612) 625 1300\r\n   EMail: daniel@boombox.micro.umn.edu\r\n\r\n\r\n   Bob Alberti\r\n   Computer and Information Services, University of Minnesota\r\n   Room 152 Shepherd Labs\r\n   100 Union Street SE\r\n   Minneapolis, MN 55455\r\n\r\n   Phone: (612) 625 1300\r\n   EMail: alberti@boombox.micro.umn.edu\r\n\r\n\r\n\r\nAnklesari, McCahill, Lindner, Johnson, Torrey & Alberti        [Page 16]\r\n\f\r\n.\r\n"